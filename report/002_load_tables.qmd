```{r}
#| echo: false

if (file.exists(here::here("report/tables"))) {
  all_files <- list.files(here::here("report/tables"), full.names = TRUE)
  all_rda_files <- all_files[grep(".rda", all_files)]
  for (a in 1:length(all_rda_files)) {
    load(all_rda_files[a])
  }
  
  # process all executive summary tables
  catches_es_table <- catches_es$table
  colnames(catches_es_table)[4] <- "Total removals (mt)"
  catches_es_cap <- catches_es$cap
  catches_es_cap <- gsub("catches|catch", "removals", catches_es_cap)
  rm(catches_es)
  
  ssb_es_table <- ssb_es$table
  colnames(ssb_es_table)[c(3,4)] <- c("Lower Interval (Billions of eggs)",  "Upper Interval (Billions of eggs)")
  ssb_es_cap <- ssb_es$cap
  ssb_es_cap <- gsub("fraction unfished", "fraction of unfished spawning output", ssb_es_cap)
  ssb_es_cap <- gsub(" percent", "% confidence", ssb_es_cap)
  rm(ssb_es)
  
  spr_es_table <- spr_es$table
  spr_es_cap <- spr_es$cap
  spr_es_cap <- gsub(" percent", "% confidence", spr_es_cap)
  rm(spr_es)
  
  recr_es_table <- recr_es$table
  recr_es_cap <- recr_es$cap
  recr_es_cap <- gsub(" percent", "% confidence", recr_es_cap)
  rm(recr_es)
  
  reference_points_table <- reference_points$table
  reference_points_cap <- reference_points$cap
  reference_points_cap <- gsub(" percent", "% confidence", reference_points_cap)
  rm(reference_points)
  
  recent_management_table <- recent_management$table
  recent_management_cap <- recent_management$cap
  rm(recent_management)
    
  projections_table <- projections$table
  projections_table[c(1,2), c(2,3)] <- c(1.50, 1.80, 1.30, 1.50)
  projections_cap <- projections$cap
  projections_cap <- gsub("fraction unfished", "fraction of unfished spawning output", projections_cap)
  projections_cap <- gsub("the buffer between the OFL and ABC", "the buffer between the OFL and ABC based on a category 1 sigma of 0.75 and $P\\^\\*$ of 0.45", projections_cap)
  rm(projections)
  
  compweight_table <- table_compweight$table
  compweight_cap <- table_compweight$cap
  compweight_cap <- gsub("`", "'", compweight_cap)
  rm(table_compweight)
  
  config_table <- table_config$table
  config_table[3,"Section"] <- "Population length bins"
  config_cap <- table_config$cap
  rm(table_config)
  
  parcount_table <- table_parcounts$table
  parcount_cap <- table_parcounts$cap
  parcount_cap <- gsub("Estimated", "Number of estimated", parcount_cap)
  rm(table_parcounts)
  
  pars_table <- table_pars$table
  pars_table["L_at_Amax_Fem_GP_1", "Value"] <- round(mod_out$parameters["L_at_Amax_Fem_GP_1", "Value"],2)
  pars_table["Mat50%_Fem_GP_1", "Value"] <- round(mod_out$parameters["Mat50%_Fem_GP_1", "Value"],2)
  pars_cap <- table_pars$cap
  rm(table_pars)

  # table from r4ss::table_exec_summary()
  time_series_table <- time_series$table
  time_series_cap <- time_series$cap
  rm(time_series)

  time_series_table <- time_series_table |>
    dplyr::mutate(dplyr::across(dplyr::everything(), ~ dplyr::case_when(
      grepl("Spawning", dplyr::cur_column()) ~ round(.x, 2),
      grepl("Mortality", dplyr::cur_column()) ~ round(.x, 2),
      grepl("Total", dplyr::cur_column()) ~ round(.x, 0),
      grepl("Fraction", dplyr::cur_column()) ~ round(.x, 3),
      grepl("Recruits", dplyr::cur_column()) ~ round(.x, 0),
      TRUE ~ round(.x, 3)
    )))

  # table from r4ss::table_ts() (not used currently)
  ts_table <- table_ts$table
  ts_cap <- table_ts$cap
  rm(table_ts)

  eval_tables <- TRUE
} else {
  eval_tables <- FALSE
}
```

```{r}
#| echo: false
#| message: false
#| eval: true

library(r4ss)
source(here('code/table_decision_format.R'))


decision_table_cap <- "Decision table with 10-year projections beginning in 2027 for alternative states of nature based around modeling natural mortality (M). All models assume a $P^* = 0.45$. Catch (mt) is from the projections from the base model, and is applied to each state of nature. Catches in 2025 and 2026 are fixed at values provided by the GMT. The alternative states of nature ('Low', 'Base', and 'High') are provided in the columns. Natural mortality is fixed either at the low state of nature (Low M = 0.0525), the base model value (M = 0.068), or the high state of nature (High M = 0.08). Spawning output ('Spawn', in billions of eggs) and fraction of unfished ('Frac') is provided for each state of nature."


low45 <- SS_output(here('models', paste0(base_model, "_low_M_pstar_0.45")), 
                   SpawnOutputLabel = "Spawning output (billions of eggs)", 
                    printstats = FALSE, verbose = FALSE)
base45 <- SS_output(here('models', base_model),
                    SpawnOutputLabel = "Spawning output (billions of eggs)", 
                    printstats = FALSE, verbose = FALSE)
high45 <- SS_output(here('models', paste0(base_model, "_high_M_pstar_0.45")), 
                    SpawnOutputLabel = "Spawning output (billions of eggs)", 
                    printstats = FALSE, verbose = FALSE)

```